"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta  # Used for setting token expiration times

# ðŸ“Œ Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# ðŸ“Œ Load environment variables from backend/.env
env_path = os.path.join(BASE_DIR, ".env")
load_dotenv(env_path)

# ðŸ“Œ Secret Key (Keep it secret in production!)
SECRET_KEY = os.getenv("SECRET_KEY", "default-secret-key")

# ðŸ“Œ Debug Mode (Set to False in production!)
DEBUG = True

# ðŸ“Œ Allowed Hosts (Define hosts allowed to access the backend)
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# ðŸ“Œ CORS (Allow Frontend to Connect)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React Frontend (Development)
]

# ðŸ“Œ Installed Applications (Django + DRF + JWT + CORS)
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "rest_framework",  # Django Rest Framework for API development
    "rest_framework_simplejwt",  # JWT Authentication
    "rest_framework_simplejwt.token_blacklist",  # Enables JWT token blacklisting
    "corsheaders",  # Allows cross-origin requests (CORS)

    # Custom apps
    "habits",  # Your Habit app
]

# ðŸ“Œ Django Rest Framework (DRF) Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # Use JWT authentication
    ),
}

# ðŸ“Œ JWT Authentication Settings (Ensures Correct Token Handling)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),  # 1-hour access token lifetime
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 7-day refresh token lifetime
    "ROTATE_REFRESH_TOKENS": True,  # Get new refresh token on refresh
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old tokens after rotation
    "AUTH_HEADER_TYPES": ("Bearer",),  # Ensure tokens use "Bearer"
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),  # Specify correct token class
}

# ðŸ“Œ OpenAI API Key (Loaded from .env)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # ðŸ†• Added AI integration

# ðŸ“Œ Middleware (Handles security, sessions, authentication, and CORS)
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Allow frontend requests
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ðŸ“Œ Root URL configuration
ROOT_URLCONF = "backend.urls"

# ðŸ“Œ Templates Configuration
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ðŸ“Œ WSGI Configuration (For running Django application)
WSGI_APPLICATION = "backend.wsgi.application"

# ðŸ“Œ Database (SQLite for development, PostgreSQL for production)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",  # Uses SQLite by default
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# ðŸ“Œ PostgreSQL Configuration (Uncomment if switching to PostgreSQL)
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("DB_NAME", "habit_tracker"),
#         "USER": os.getenv("DB_USER", "your_db_user"),
#         "PASSWORD": os.getenv("DB_PASSWORD", "your_db_password"),
#         "HOST": os.getenv("DB_HOST", "localhost"),
#         "PORT": os.getenv("DB_PORT", "5432"),
#     }
# }

# ðŸ“Œ Password Validation (Security Best Practices)
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ðŸ“Œ Internationalization & Time Settings
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ðŸ“Œ Static Files (CSS, JavaScript, Images)
STATIC_URL = "static/"

# ðŸ“Œ Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
